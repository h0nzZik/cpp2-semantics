#!/usr/bin/env bash

set -euo pipefail

# https://stackoverflow.com/a/246128/6209703
kcpp2_script_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
kcpp2_install_prefix=$(realpath "$kcpp2_script_dir/..")
kcpp2_parser_dir="$kcpp2_install_prefix/lib/kcpp2/parser/parsing-kompiled"
kcpp2_semantics_dir="$kcpp2_install_prefix/lib/kcpp2/semantics/cpp2-kompiled"

verbose=
disambiguate_only=
disambiguate_depth=

while true; do
	case "$1" in
		'--stop-after-disambiguation')
            disambiguate_only="1"
            shift
			continue
		;;
		'--disambiguation-depth')
            disambiguate_depth="$2"
			shift 2
			continue
        ;;
        '--verbose')
            verbose="1"
            shift
            continue
		;;
		'--')
			shift
			break
		;;
        *)
			break
        ;;
	esac
done

execute_command() {
    if [[ -n "$verbose" ]]; then
        echo "$@";
    fi
    $@
}

parse() {
    local input_file="$1";
    local output_file="$2";
    execute_command kparse --definition "$kcpp2_parser_dir" --output-file "$output_file" "$input_file";
}

disambiguate() {
    local input_file="$1";
    local output_file="$2";
    local krun_args=(--definition "$kcpp2_parser_dir" --output kore --output-file "$output_file")
    if [ -n "$disambiguate_depth" ]; then
        krun_args+=(--depth "$disambiguate_depth");
    fi
    krun_args+=(--parser cat "$input_file")
    execute_command krun ${krun_args[*]};
}

run() {
    local input_file="$1"; shift
    execute_command krun --definition "$kcpp2_semantics_dir" --parser cat "$input_file" ;
}

pretty_print() {
    local input_kore_file="$1"; shift
    execute_command kore-print --definition "$kcpp2_parser_dir" "$input_kore_file"
}

extract_parsed_translation_unit() {
    local input_file="$1";
    local output_file="$2";

    # TODO: Move this script to pyk?
    prefix="Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortDeclarations{}, SortKItem{}}("
    string=$(cat "$input_file")
    foo=${string#"$prefix"}
    # Remove suffix of the shape suffix="),dotk{}()))),Lbl'-LT-'generatedCounter'-GT-'{}(\dv{SortInt{}}(\"$SOMETHING\")))"
    # where $SOMETHING is something.
    # First, remove the last three closing parentheses and the closing '"'.
    suffix1="\")))"
    foo=${foo%"$suffix1"}
    # Now, remove a number from the end.
    foo=$(echo "$foo" | sed -E 's/(.*)([0-9]+)/\1/')
    # Now, remove the generated counter.
    suffix2=",Lbl'-LT-'generatedCounter'-GT-'{}(\dv{SortInt{}}(\""
    foo=${foo%"$suffix2"}
    # Now. remove the rest
    suffix3="),dotk{}())))"
    foo=${foo%"$suffix3"}
    echo "inj{SortDeclarations{}, SortTranslationUnit{}}(${foo})" > "$output_file"
}

# Main
# ====

input_pgm="$1"; shift
parse "$input_pgm" "$input_pgm".deparametrized.kore
disambiguate "$input_pgm".deparametrized.kore "$input_pgm".disambiguated.kore
extract_parsed_translation_unit "$input_pgm".disambiguated.kore "$input_pgm".stripped.kore
[[ -z "$disambiguate_only" ]] || { pretty_print "$input_pgm".stripped.kore; exit ; }
run "$input_pgm".disambiguated.stripped.kore
