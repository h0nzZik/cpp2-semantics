#!/usr/bin/env python3

import json
from argparse import ArgumentParser
import tempfile
import os.path
import pathlib
import sys

from pyk.kast.manip import (remove_source_map)
from pyk.kast.outer import (read_kast_definition)
from pyk.kore.syntax import (Kore, App, SortApp, DV, String)
from pyk.kore import parser as KoreParser
from pyk.ktool.kprint import (pretty_print_kast, KPrint, build_symbol_table)
  
class Kcpp2Error(Exception): ...


def create_argument_parser() -> ArgumentParser:
    parser = ArgumentParser(description='Extracts the result of translation from the final configuration.')
    parser.add_argument('input_file', type=str, help='Path to the *.cpp2 file')
    parser.add_argument('--output-file', type=str, help='Path to file where to write the resulting configuration')
    parser.add_argument('--upto', choices=['disambiguate','translate','execute'], default='exec')
    parser.add_argument('--depth', type=int, default=-1)
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('--temp-dir', type=str, help='A directory for storing temporary files', default=None)
    parser.add_argument('--result-format', type=str, help="Format of the output", default="pretty")
    parser.add_argument('--prove', action='store_true')
    return parser

verbose = False

kcpp2_script_dir = pathlib.Path( __file__ ).parent.absolute()
kcpp2_install_prefix = os.path.realpath(os.path.join(kcpp2_script_dir, '..'))
kcpp2_parser_dir = os.path.abspath(os.path.join(kcpp2_install_prefix, 'lib/kcpp2/parser/parsing-kompiled'))
kcpp2_semantics_dir = os.path.abspath(os.path.join(kcpp2_install_prefix, 'lib/kcpp2/semantics/cpp2-kompiled'))
kcpp2_semantics_symbol_table = build_symbol_table(remove_source_map(read_kast_definition(os.path.join(kcpp2_semantics_dir, 'compiled.json'))))
kcpp2_semantics_kprint = KPrint(kcpp2_semantics_dir)

def verbose_echo(text):
    if verbose:
        print(text)

def execute_command(command) -> int :
    verbose_echo(command)
    return os.waitstatus_to_exitcode(os.system(command))

def parse(input_file, output_file) -> int:
    verbose_echo("Parsing '{}' into '{}'".format(input_file, output_file))
    return execute_command("kparse --definition {} --output-file {} {}".format(kcpp2_parser_dir, output_file, input_file))

def disambiguate(input_file, output_file, depth) -> int:
    verbose_echo("Disambiguating '{}' into '{}' with depth {}".format(input_file, output_file, depth))
    return execute_command("krun --definition {} --output kore --output-file {} --depth {} --parser cat {}".format(kcpp2_parser_dir, output_file, depth, input_file))

def run_phase(phase, input_file, output_file, depth) -> int:
    depth_str = ""
    if depth != -1:
        depth_str = "--depth {}".format(depth)
    return execute_command("krun --no-exc-wrap --definition {} --parser cat --output kore --output-file {} -cPHASE={} {} {} 2> /dev/null".format(
        kcpp2_semantics_dir, output_file, phase, depth_str, input_file
    ))

def run_translation(input_file, output_file, depth) -> int:
    verbose_echo("Translating '{}' into '{}'".format(input_file, output_file))
    return run_phase(phase="'TranslationPhase()'", input_file=input_file, output_file=output_file, depth=depth)

def run_execution(input_file, output_file, depth) -> int:
    verbose_echo("Executing '{}' into '{}'".format(input_file, output_file))
    return run_phase(phase="'ExecutionPhase()'", input_file=input_file, output_file=output_file, depth=depth)

def pretty_print(semantics_dir, input_kore_file, output_file, output_format="pretty"):
    verbose_echo("Pretty printing '{}' into '{}'".format(input_kore_file, output_file))
    output_file_str=""
    if output_file != None and output_file != "":
        output_file_str = "--output-file {}".format(output_file)
    result = execute_command("kore-print {} --definition {} --output {} {}".format(input_kore_file, semantics_dir, output_format, output_file_str))
    if result != 0:
        raise Kcpp2Error

declarationsCons = "Lbl'UndsUndsUnds'CPP2-SYNTAX'Unds'Declarations'Unds'Declaration'Unds'Declarations"
declarationsNil = "Lbl'Stop'List'LBraQuotUndsUndsUnds'CPP2-SYNTAX'Unds'Declarations'Unds'Declaration'Unds'Declarations'QuotRBraUnds'Declarations"

def isMagic(cfg):
    match cfg:
        case App("inj", _, (App("LblmagicComment", _, _),)):
            return True
    return False

def stripMagicComments(cfg):
    # Maybe we should handle the case when there is only one declaration, and it is magic.
    # if (isMagic(cfg)):
    #    return App(declarationsNil, (), [])
    match cfg:
        case App(declarationsCons, sorts, (l, r)):
            magic = isMagic(l)
            r2 = stripMagicComments(r)
            if magic:
                return (r2[0], r2[1] + [l])
            else:
                return (App(declarationsCons, sorts, (l, r2[0])),r2[1])
        case other:
            return (other,[])


def getParsingResult(cfg):
    match cfg:
        case App("Lbl'-LT-'generatedTop'-GT-'", _,
                (App("Lbl'-LT-'T'-GT-'", _,
                    (App("Lbl'-LT-'k'-GT-'", _, 
                        (App("kseq", _, 
                            (App("inj", _, (kContent,)),_)),)),)
                    ), 
                 counter
                )
        ):
            stripped = stripMagicComments(kContent)
            filtered = stripped[0]
            #print("Comments only: {}".format(stripped[1]))
            result = App(symbol='inj', sorts=(SortApp(name='SortDeclarations', sorts=[]), SortApp(name='SortKItem', sorts=[])), patterns=[filtered])
            return (result,stripped[1])
        case _:
            print("Not found")
            raise Kcpp2Error()


# Returns extracted magic comments
def extract_parsed_translation_unit(input_file, output_file):
    parser = KoreParser.KoreParser(open(input_file, "r").read())
    cfg = parser.pattern()
    tr = getParsingResult(cfg)
    with open(output_file, "w") as fw:
        fw.write(tr[0].text)
    
    return tr[1]

def getTranslationResult(cfg):
    match cfg:
        case App("Lbl'-LT-'generatedTop'-GT-'", _,
                (App("Lbl'-LT-'T'-GT-'", _,
                    (phaseCell, kCell, translationResultCell, statesCell, exitCodeCell)), counter)
        ):
            return translationResultCell

def extract_translation_result(input_file, output_file):
    parser = KoreParser.KoreParser(open(input_file, "r").read())
    cfg = parser.pattern()
    translationResultCell = getTranslationResult(cfg)
    tresult = App(symbol="LbltranslationResultWrapper", sorts=(), patterns=[translationResultCell])
    with open(output_file, "w") as fw:
        fw.write(tresult.text)
    return translationResultCell

def depth_for_phase(args, phase):
    if phase == args.upto:
        return args.depth
    return -1 # the default depth

def cleanMagic(cfg):
    match cfg:
        case App("inj", _, (App("LblmagicComment", _, (start, App(claimType,_,_), App("inj", _, (DV(_, String(claimId)),)), DV(_, String(content)), end)),)):
            return (claimType, claimId, content)
    raise Kcpp2Error

def generateClaim(magic_comment, translation_result_pretty : str) -> str:
    claim_id : str = magic_comment[1]
    orig_text : str = magic_comment[2]
    text = orig_text.removeprefix("```k").removesuffix("```")
    return "claim [{}]: {}\n{}\n<phase>ExecutionPhase()</phase>\n".format(claim_id, text, translation_result_pretty)

def quoteIdentifiers(cfg : Kore):
    #print("quoting: {}".format(cfg))
    match cfg:
        case App(_,_,_):
            return cfg.map_pattern(quoteIdentifiers)
        case DV(SortApp("SortId", ()), value):
            return App("LblString2Id", (), [DV(SortApp("SortString", ()), value)])
        case DV(_, _):
            return cfg
        case other:
            print("unknown: {}".format(other))
    return cfg

def write_spec_file(magic_comments, translation_result, spec_file, module_name):
    translation_result_2 = translation_result.map_pattern(quoteIdentifiers)
    magic_comments_clean = list(map(cleanMagic, magic_comments))
    trkast = kcpp2_semantics_kprint.kore_to_kast(translation_result_2)
    trpretty = pretty_print_kast(trkast, kcpp2_semantics_symbol_table)
    claims = list(map(lambda x: generateClaim(x, trpretty), magic_comments_clean))
    claims_str = "\n/******/\n".join(claims)
    spec : str = "module {}\nimports CPP2\n{}\nendmodule\n".format(module_name, claims_str)
    #print(spec)
    with open(spec_file, "w") as fw:
        fw.write(spec)

def run_kprove(spec_file, module_name):
    return execute_command("kprove --definition {} '{}'".format(kcpp2_semantics_dir, spec_file))

def main():
    # KAST terms can end up nested quite deeply, because of the various assoc operators (eg. _Map_, _Set_, ...).
    # Most pyk operations are defined recursively, meaning you get a callstack the same depth as the term.
    # This change makes it so that in most cases, by default, pyk doesn't run out of stack space.
    sys.setrecursionlimit(10**7)

    parser = create_argument_parser()
    args = parser.parse_args()
    global verbose
    verbose = args.verbose
    temp_dir = None
    temp_dir_name = args.temp_dir
    if temp_dir_name is None:
        temp_dir = tempfile.TemporaryDirectory()
        temp_dir_name = temp_dir.name
    
    # Parse & disambiguate
    input_file_basename = os.path.basename(args.input_file)
    basename = os.path.join(temp_dir_name, input_file_basename)
    result = parse(args.input_file, (basename + ".kore"))
    if result != 0:
        verbose_echo("Parsing failed")
        exit(result)
    result = disambiguate((basename + ".kore"), (basename + ".disambiguated.kore"), depth_for_phase(args, "disambiguate"))
    if args.upto == "disambiguate" or result != 0:
        if result != 0:
            verbose_echo("Disambiguation failed with result: {}".format(result))
        pretty_print(kcpp2_parser_dir, (basename + ".disambiguated.kore"), args.output_file, args.result_format)
        exit(result)
    
    # Translate
    magic_comments = extract_parsed_translation_unit((basename + ".disambiguated.kore"), (basename + ".stripped.kore"))
    result = run_translation((basename + ".stripped.kore"), (basename + ".translated.kore"), depth_for_phase(args, "translate"))
    if args.upto == "translate" or result != 0:
        if result != 0:
            verbose_echo("Translation failed with result: {}".format(result))
        pretty_print(kcpp2_semantics_dir, (basename + ".translated.kore"), args.output_file, args.result_format)
        exit(result)
    
    translation_result = extract_translation_result((basename + ".translated.kore"), (basename + ".translation-result.kore"))

    if args.prove:
        verbose_echo("Generating specification...")
        dashed_basename = input_file_basename.replace('.','-')
        module_name = dashed_basename.upper() + "-SPEC"
        spec_file_name = os.path.join(temp_dir_name, dashed_basename + "-spec.k")
        write_spec_file(magic_comments, translation_result, spec_file_name, module_name)
        run_kprove(spec_file_name, module_name)
        return

    # Execution
    result = run_execution((basename + ".translation-result.kore"), (basename + ".executed.kore"), args.depth)
    pretty_print(kcpp2_semantics_dir, (basename + ".executed.kore"), args.output_file, args.result_format)
    if result != 0:
        verbose_echo("Execution failed with result: {}".format(result))
        exit(result)
    return

if __name__ == "__main__":
   main()
